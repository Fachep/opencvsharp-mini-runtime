name: Make-NuGet

on:
  workflow_dispatch:

env:
  NUGET_VERSION_PREFIX: 4.11.0

permissions:
  packages: write

jobs:
  make-nuget:
    name: Make NuGet
    runs-on: ubuntu-22.04
    defaults:
      run:
        shell: bash

    strategy:
      matrix:
        include:
        - { os: android,      arch: arm64, upstream: android-arm64 }
        - { os: android,      arch: x64,   upstream: android-x64 }

    steps:
    - name: Download OpenCvSharp Artifacts
      env:
        GH_TOKEN: ${{ github.token }}
      run: |
        echo "Fetching latest successful opencvsharp.yml run of branch ${{ github.ref_name }}"
        RUN_ID=$(gh run list -R ${{ github.repository }} \
                  --workflow=opencvsharp.yml \
                  --branch=${{ github.ref_name }} \
                  --status=success --limit=1 \
                  --json databaseId | jq -r '.[0].databaseId')
        echo "Run id = $RUN_ID"

        ART_NAME="opencvsharp-${{ matrix.upstream }}"
        echo "Download artifact ${ART_NAME}"
        gh run download -R ${{ github.repository }} "$RUN_ID" --name "$ART_NAME" --dir opencvsharp

        echo "::group::Artifact tree"
        ls -lR opencvsharp
        echo "::endgroup::"

    - name: Build NuGet package
      env:
        VERSION: ${{ env.NUGET_VERSION_PREFIX }}.${{ github.run_number }}
      run: |
        set -euo pipefail

        PKG_ID="VCameraClient.OpenCvSharp4.mini.runtime.${{ matrix.os }}-${{ matrix.arch }}"
        AUTHOR="sdcb,Fachep"
        LICENSE="Apache-2.0"
        GIT_URL="https://github.com/sdcb/opencvsharp-mini-runtime"
        TAGS="Sdcb OpenCV OpenCvSharp OpenCvSharp4"
        YEAR=$(date +%Y)

        case "${{ matrix.os }}" in
          win* )
            LIB_NAME="OpenCvSharpExtern.dll"
            RUNTIME_RID="win-${{ matrix.arch }}"
            ;;
          osx* )
            LIB_NAME="libOpenCvSharpExtern.dylib"
            RUNTIME_RID="osx-${{ matrix.arch }}"
            ;;
          * )
            LIB_NAME="libOpenCvSharpExtern.so"
            RUNTIME_RID="linux-${{ matrix.arch }}"
            ;;
        esac

        LIB_SRC="${{ github.workspace }}/opencvsharp/lib/${LIB_NAME}"
        if [[ ! -f "$LIB_SRC" ]]; then
          echo "::error file not found::${LIB_SRC}"
          exit 1
        fi
        
        WORK="$RUNNER_TEMP/pkg"
        mkdir -p \
          "$WORK/runtimes/${RUNTIME_RID}/native" \
          "$WORK/lib/netstandard2.0" \
          "$WORK/lib/net45" \
          "$WORK/build/net45"

        cp "$LIB_SRC" "$WORK/runtimes/${RUNTIME_RID}/native/"
        touch "$WORK/lib/netstandard2.0/_._"
        cp "$WORK/lib/netstandard2.0/_._" "$WORK/lib/net45/_._"

        NORMALIZED_NAME="$(echo "${PKG_ID}" | tr '.-' '_' )_Dlls"
        PROPS_FILE="$WORK/build/net45/${PKG_ID}.props"
        
        cat > "$PROPS_FILE" <<EOF
        <Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
          <PropertyGroup>
            <${NORMALIZED_NAME}>\$(MSBuildThisFileDirectory)..\\..\\runtimes</${NORMALIZED_NAME}>
          </PropertyGroup>
        
          <ItemGroup Condition="\$(TargetFrameworkVersion.StartsWith('v4')) Or \$(TargetFramework.StartsWith('net4'))">
            <Content Include="\$(${NORMALIZED_NAME})\\${RUNTIME_RID}\\native\\${LIB_NAME}">
              <Link>dll\\${{ matrix.arch }}\\${LIB_NAME}</Link>
              <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
            </Content>
          </ItemGroup>
        </Project>
        EOF

        NUSPEC_FILE="$WORK/${PKG_ID}.nuspec"
        cat > "$NUSPEC_FILE" <<EOF
        <?xml version="1.0" encoding="utf-8"?>
        <package xmlns="http://schemas.microsoft.com/packaging/2010/07/nuspec.xsd">
          <metadata>
            <id>${PKG_ID}</id>
            <version>${VERSION}</version>
            <title>${PKG_ID} native bindings</title>
            <authors>${AUTHOR}</authors>
            <requireLicenseAcceptance>true</requireLicenseAcceptance>
            <description>Native binding for ${AUTHOR}.OpenCvSharp4.mini to work on ${RUNTIME_RID}.</description>
            <summary>Native binding for ${AUTHOR}.OpenCvSharp4.mini to work on ${RUNTIME_RID}.</summary>
            <copyright>Copyright ${YEAR}</copyright>
            <license type="expression">${LICENSE}</license>
            <projectUrl>${GIT_URL}</projectUrl>
            <repository type="git" url="${GIT_URL}.git" />
            <tags>${TAGS}</tags>
            <dependencies />
            <frameworkAssemblies />
          </metadata>
          <files>
            <file src="lib\\netstandard2.0\\_._" target="lib\\netstandard2.0" />
            <file src="lib\\net45\\_._"          target="lib\\net45" />
            <file src="runtimes\\${RUNTIME_RID}\\native\\${LIB_NAME}" target="runtimes\\${RUNTIME_RID}\\native" />
            <file src="build\\net45\\${PKG_ID}.props" target="build\\net45" />
          </files>
        </package>
        EOF

        pushd "$WORK" >/dev/null
        nuget pack "${NUSPEC_FILE}" -OutputDirectory "${{ github.workspace }}/nupkgs"
        popd >/dev/null

        echo "::group::generated nupkg"
        ls -l "${{ github.workspace }}/nupkgs"
        echo "::endgroup::"

    # ------------------------------------------------------------
    # 3. 上传结果
    # ------------------------------------------------------------
    - name: Upload nupkg artifact
      uses: actions/upload-artifact@v4
      with:
        name: nuget-${{ matrix.os }}-${{ matrix.arch }}
        path: nupkgs/*.nupkg
        if-no-files-found: error
